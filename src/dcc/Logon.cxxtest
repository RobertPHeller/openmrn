#include "dcc/Logon.hxx"

#include "utils/async_traction_test_helper.hxx"
#include "os/FakeClock.hxx"
#include "dcc/LogonModule.hxx"

using ::testing::ElementsAre;

namespace dcc
{

class LogonTest : public openlcb::TractionTest
{
protected:
    ~LogonTest()
    {
        logonHandler_.shutdown();
        twait();
    }

    DefaultLogonModule module_;
    RailcomHubFlow railcomHub_ {&g_service};
    StrictMock<MockTrackIf> track_;
    LogonHandler<DefaultLogonModule> logonHandler_ {
        &g_service, &track_, &railcomHub_, &module_};
};

TEST_F(LogonTest, create)
{
}

TEST_F(LogonTest, logon_per_300msec)
{
    FakeClock clk;
    EXPECT_CALL(
        track_, packet(ElementsAre(254, 255, 0x22, 0x11, 0x5a), 0xFEFC0000ull));
    logonHandler_.startup_logon(0x2211, 0x5a);
    wait();
    Mock::VerifyAndClear(&track_);
    clk.advance(MSEC_TO_NSEC(20));
    wait();

    clk.advance(MSEC_TO_NSEC(250));

    EXPECT_CALL(
        track_, packet(ElementsAre(254, 255, 0x22, 0x11, 0x5a), 0xFEFC0000ull));
    clk.advance(MSEC_TO_NSEC(50));
    wait();

    EXPECT_CALL(
        track_, packet(ElementsAre(254, 255, 0x22, 0x11, 0x5a), 0xFEFC0000ull));
    clk.advance(MSEC_TO_NSEC(300));
    wait();
}

} // namespace dcc
